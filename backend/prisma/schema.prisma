generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String             @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role              Int                @default(2) @db.SmallInt
  email             String             @unique(map: "users_un") @db.VarChar(255)
  password          Bytes
  create_time       DateTime?          @default(now()) @db.Timestamptz(6)
  update_time       DateTime?          @default(now()) @db.Timestamptz(6)
  boid              String?            @db.Uuid
  verification      Boolean            @default(false)
  avatar_url        String?            @db.VarChar(512)
  display_name      String?            @db.VarChar(255)
  bus_operators     bus_operators?     @relation(fields: [boid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
  bus_tickets       bus_tickets[]
  reviews           reviews[]
  user_verification user_verification?
}

model bus_operators {
  id        String    @id(map: "bus_operators_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_url String?
  phone     String?
  name      String
  buses     buses[]
  reviews   reviews[]
  users     users[]

  @@index([name])
}

model bus_stations {
  id                                    String     @id(map: "bus_stations_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                  String
  location                              String
  buses_bus_stationsTobuses_end_point   buses[]    @relation("bus_stationsTobuses_end_point")
  buses_bus_stationsTobuses_start_point buses[]    @relation("bus_stationsTobuses_start_point")
  point_bs                              point_bs[]

  @@index([location])
}

model bus_tickets {
  id                                         String    @id(map: "bus_tickets_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bus_id                                     String    @db.Uuid
  user_id                                    String    @db.Uuid
  name                                       String
  phone                                      String
  seats                                      String
  status                                     Int       @default(0) @db.SmallInt
  create_time                                DateTime? @default(now()) @db.Timestamptz(6)
  update_time                                DateTime? @default(now()) @db.Timestamptz(6)
  pick_up_point                              String?   @db.Uuid
  drop_down_point                            String?   @db.Uuid
  note                                       String?
  num_seats                                  Int
  buses                                      buses     @relation(fields: [bus_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk")
  points_bus_tickets_drop_down_pointTopoints points?   @relation("bus_tickets_drop_down_pointTopoints", fields: [drop_down_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk_4")
  points_bus_tickets_pick_up_pointTopoints   points?   @relation("bus_tickets_pick_up_pointTopoints", fields: [pick_up_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk_3")
  users                                      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bus_tickets_fk_2")
}

model buses {
  id                                           String        @id(map: "buses_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bo_id                                        String        @db.Uuid
  start_point                                  String        @db.Uuid
  end_point                                    String        @db.Uuid
  type                                         Int           @db.SmallInt
  start_time                                   DateTime      @db.Timestamptz(6)
  end_time                                     DateTime      @db.Timestamptz(6)
  image_url                                    String
  policy                                       String?
  num_of_seats                                 Int           @db.SmallInt
  price                                        Int
  bus_operators                                bus_operators @relation(fields: [bo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk")
  bus_stations_bus_stationsTobuses_end_point   bus_stations  @relation("bus_stationsTobuses_end_point", fields: [end_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk_3")
  bus_stations_bus_stationsTobuses_start_point bus_stations  @relation("bus_stationsTobuses_start_point", fields: [start_point], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "buses_fk_2")
  bus_tickets                                  bus_tickets[]

  @@index([price])
}

model reviews {
  id            String        @id(map: "reviews_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment       String
  rate          Int           @db.SmallInt
  user_id       String        @db.Uuid
  bo_id         String        @db.Uuid
  create_time   DateTime?     @default(now()) @db.Timestamptz(6)
  update_time   DateTime?     @default(now()) @db.Timestamptz(6)
  bus_operators bus_operators @relation(fields: [bo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_fk_2")
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_fk")
}

model user_verification {
  uid   String @id @db.Uuid
  code  String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users users  @relation(fields: [uid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model blogs {
  id          String    @id(map: "blogs_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  thumbnail   String?   @db.VarChar(512)
  title       String    @db.VarChar
  content     String    @db.VarChar
  create_time DateTime? @default(now()) @db.Timestamptz(6)
  update_time DateTime? @default(now()) @db.Timestamptz(6)
}

model points {
  id                                              String        @id(map: "point_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                            String
  location                                        String
  bus_tickets_bus_tickets_drop_down_pointTopoints bus_tickets[] @relation("bus_tickets_drop_down_pointTopoints")
  bus_tickets_bus_tickets_pick_up_pointTopoints   bus_tickets[] @relation("bus_tickets_pick_up_pointTopoints")
  point_bs                                        point_bs[]
}

model point_bs {
  point_id     String       @db.Uuid
  bs_id        String       @db.Uuid
  bus_stations bus_stations @relation(fields: [bs_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "point_bs_fk_1")
  points       points       @relation(fields: [point_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "point_bs_fk")

  @@id([point_id, bs_id], map: "point_bs_pk")
}
